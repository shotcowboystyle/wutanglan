---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring

spec:
  interval: 5m

  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 38.0.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m

  install:
    remediation:
      retries: 5

  upgrade:
    remediation:
      retries: 5

  values:
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m

        receivers:
          - name: "null"

          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}

        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "pushover"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"

            - receiver: "discord"
              matchers:
                - severity = critical
              continue: true

        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true

        ingressClassName: "traefik"

        pathType: Prefix

        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "bell"
          hajimari.io/group: monitoring

          cert-manager.io/cluster-issuer: "letsencrypt-staging"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"

        hosts:
          - &host-alert "alerts.${SECRET_DOMAIN}"

        tls:
          - hosts:
              - *host-alert

      alertmanagerSpec:
        replicas: 2
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 512Mi

    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    kube-state-metrics:
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeApiServer:
      enabled: false

    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.10.14

    kubeScheduler:
      enabled: false
      endpoints:
        - 192.168.10.14

    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.10.14

    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.10.14

      service:
        enabled: true
        port: 2381
        targetPort: 2381

    prometheus:
      ingress:
        enabled: true

        ingressClassName: "traefik"

        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-staging"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"

        hosts:
          - &host-prom "prometheus.${SECRET_DOMAIN}"

        tls:
          - hosts:
              - *host-prom

      thanosService:
        enabled: true

      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: __replica__
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        retentionSize: "6GB"
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 10Gi

        thanos:
          image: quay.io/thanos/thanos:v0.27.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.26.0"
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml

        resources:
          requests:
            cpu: 500m
            memory: 2000Mi
          limits:
            memory: 8000Mi

        additionalScrapeConfigs:
          - job_name: "minio-job"
            honor_timestamps: true
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets:
                  - "minio.dbms.svc.cluster.local:9000"

          # - job_name: "node-exporter"
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "${NAS_ADDR}:9100"

          # - job_name: "home-assistant"
          #   scrape_interval: 60s
          #   metrics_path: "/api/prometheus"
          #   bearer_token: "${SECRET_HASSIO_PROMETHEUS_TOKEN}"
          #   scheme: http
          #   static_configs:
          #     - targets:
          #         - home-assistant.home.svc:8123

          # - job_name: "mikrotik-exporter"
          #   scrape_interval: 10s
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "mikrotik-exporter.monitoring.svc.cluster.local:9436"
