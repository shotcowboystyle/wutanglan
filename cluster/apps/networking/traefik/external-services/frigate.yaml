---
kind: Service
apiVersion: v1
metadata:
  name: frigate
  namespace: home
spec:
  # type: ExternalName
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: http
  # externalName: "${FRIGATE_IP_ADDR}"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frigate
  namespace: home
  annotations:
    # coredns.io/hostname: "frigate.${SECRET_DOMAIN}"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    # kubernetes.io/ingress.class: traefik
    # traefik.frontend.passHostHeader: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.middlewares: "networking-internal-only@kubernetescrd"
    hajimari.io/appName: "frigate"
    hajimari.io/enable: "true"
    hajimari.io/icon: "cctv"
spec:
  ingressClassName: "traefik"
  tls:
    - hosts:
        - "frigate.${SECRET_DOMAIN}"
      secretName: "frigate-tls"
  rules:
    - host: "frigate.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frigate
                port:
                  number: 5000
# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: frigate
#   namespace: networking
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - kind: Rule
#       match: Host(`frigate.${SECRET_DOMAIN}`)
#       priority: 1
#       services:
#         - kind: Service
#           name: frigate
#           port: 5000
#   tls:
#     secretName: frigate-tls

---
apiVersion: v1
kind: Endpoints
metadata:
  name: frigate
  namespace: home
subsets:
  - addresses:
      - ip: "${FRIGATE_IP_ADDR}"
    ports:
      - name: http
        port: 5000
        protocol: TCP
